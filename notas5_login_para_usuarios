te voy a dar algo de codigo, no agas nada de momento:
login.component.html y ts
<div class="bg-main-app">
    <div class="container d-flex justify-content-center align-items-center vh-100">

      <form (ngSubmit)="onLogin()">

        <div class="form-group">
          <label for="correo">Correo:</label>
          <input
            type="email"
            class="form-control"
            id="correo"
            [(ngModel)]="correo"
            name="correo"
            placeholder="alumno.17@tecsanpedro.edu.mx"
            required
          />
        </div>

        <div class="form-group">
          <label for="contrasena">Contraseña:</label>
          <input
            type="password"
            class="form-control"
            id="contrasena"
            [(ngModel)]="contrasena"
            name="contrasena"
            placeholder="contraseña"
            required
          />
        </div>

        <div class="form-group">
          <label for="rol">Tipo de usuario:</label>
          <select
            class="form-control"
            id="rol"
            name="rol"
            required
          >
            <option value="Alumno" selected>Alumno</option>
            <option value="Departamento">Departamento</option>
            <option value="Admin">Admin</option>
          </select>
        </div>

        <div class="m-0">
          <button class="btn btn-success btn-block m-2" type="submit">Iniciar Sesión</button>
          <button class="btn btn-success btn-block m-2" type="button" (click)="goToRegister()">Registrarse</button>
        </div>

        <div *ngIf="error" style="color: red;">{{ error }}</div>

      </form>


    </div>
</div>

import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../service/auth.service';
import { Alumno } from '../../interfaces/alumno.interface';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
})
export class LoginComponent {
  correo: string = '';
  contrasena: string = '';
  error: string | null = null;

  constructor(private authService: AuthService, private router: Router) {}

  onLogin(): void {
    this.authService.login(this.correo, this.contrasena).subscribe({
      next: (alumno: Alumno) => {
        this.authService.setAlumno(alumno); // 🚀 Guardar datos del alumno
        console.log('Inicio de sesión exitoso:', alumno);
        // 🚀 Redirección a la página de inicio
        this.router.navigateByUrl('/alumno/home').then(() => {
          console.log('Redirección exitosa a /alumno/home');
        }).catch(err => console.error('Error al redirigir:', err));
      },
      error: (err) => {
        this.error = 'Usuario o Contraseña incorrecto';
        console.error(err);
      },
    });
  }
  goToRegister(): void {
    this.router.navigate(['/auth/register']);
  }
}
















server.js
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const db = require('./src/app/db/db');
const multer = require('multer');
const path = require('path');


const app = express();
app.use(cors());
app.use(bodyParser.json());

app.post('/api/login', (req, res) => {
  const { correo, contrasena } = req.body;

  const query = `
    SELECT
      a.idalumnos,
      a.nombre_completo,
      a.correo,
      a.telefono,
      a.no_control,
      a.foto,
      a.fecha_registro,
      p.estatus_administracion_y_finanzas,
      p.estatus_centro_de_informacion,
      p.estatus_centro_de_computo,
      p.estatus_recursos_materiales,
      p.estatus_departamento_de_vinculacion,
      p.comentario_administracion_y_finanzas,
      p.comentario_centro_de_informacion,
      p.comentario_centro_de_computo,
      p.comentario_recursos_materiales,
      p.comentario_departamento_de_vinculacion,
      p.estatus_peticion
    FROM
      alumnos a
    LEFT JOIN
      peticiones p ON a.no_control = p.no_control
    WHERE
      a.correo = ? AND a.contrasena = ?
  `;

  db.query(query, [correo, contrasena], (err, results) => {
    if (err) {
      console.error('Error al verificar alumno:', err);
      return res.status(500).json({ error: 'Error en el servidor' });
    }

    if (results.length === 0) {
      return res.status(401).json({ error: 'Credenciales incorrectas' });
    }

    res.status(200).json(results[0]); // 🚀 Enviamos los datos del alumno + peticiones
  });
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});

// 📁 Configuración de multer para subir imágenes
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, './uploads/'); // Carpeta donde se guardarán las imágenes
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname)); // Nombre único para evitar colisiones
  }
});

const upload = multer({ storage: storage });

// 🌐 Ruta para registrar alumnos
app.post('/api/register', upload.single('foto'), (req, res) => {
  const { nombre_completo, correo, telefono, no_control, contrasena } = req.body;
  const foto = req.file ? req.file.filename : null; // Nombre de la imagen subida

  const query = `
    INSERT INTO alumnos (nombre_completo, correo, telefono, no_control, foto, contrasena, fecha_registro)
    VALUES (?, ?, ?, ?, ?, ?, NOW())
  `;

  db.query(query, [nombre_completo, correo, telefono, no_control, foto, contrasena], (err, result) => {
    if (err) {
      console.error('Error al registrar alumno:', err);
      return res.status(500).json({ error: 'Error en el servidor' });
    }
    res.status(201).json({ message: 'Alumno registrado exitosamente' });
  });
});


no agas nada de momento:





















auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Alumno } from '../interfaces/alumno.interface';
import { map } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/api/login';
  private alumnoSubject = new BehaviorSubject<Alumno | null>(null);

  constructor(private http: HttpClient) {}

  // 🚀 Método actualizado para iniciar sesión y obtener los datos de 'alumnos' + 'peticiones'
  login(correo: string, contrasena: string): Observable<Alumno> {
    return this.http.post<Alumno>(this.apiUrl, { correo, contrasena });
  }

  setAlumno(alumno: Alumno): void {
    this.alumnoSubject.next(alumno);
  }

  isAlumnoAuthenticated(): Observable<boolean> {
    return this.alumnoSubject.asObservable().pipe(map(alumno => !!alumno));
  }

  getAlumno(): Observable<Alumno | null> {
    return this.alumnoSubject.asObservable();
  }

  logout(): void {
    this.alumnoSubject.next(null);
    localStorage.removeItem('alumno');
    sessionStorage.removeItem('alumno');
  }

  // 🚀 Método para registrar alumnos en la db
}


a base de datos se llama "no_adeudo", esta tiene 4 tablas, administrador, alumnos, peticiones y departamentos:

administrador:
Columns:
idadministrador int AI PK
usuario varchar(45)
contrasena varchar(45)
rol varchar(20)

alumnos:
Columns:
idalumnos int AI PK NN
nombre_completo varchar(100)
correo varchar(45)
telefono varchar(45)
no_control varchar(45) UQ
foto varchar(45)
contrasena varchar(45)
fecha_registro date
rol varchar(20)

departamentos:
Columns:
iddepartamentos int AI PK
nombre_departamento varchar(45)
usuario varchar(45)
contrasena varchar(45)
departamento_id varchar(45)
rol varchar(20)



esta es la otra parte del proyecto: no agas nada de momento





















esta es la estructura del proyecto:
Proyecto/
├── src/
│   ├── app/
│   │   ├── admin/
│   │   │   ├── administrador/
│   │   │   │   ├── administrador.component.html
│   │   │   │   ├── administrador.component.ts
│   │   │   │   ├── administrador.component.css
│   │   │   │   ├── components/
│   │   │   │   │   ├──departamentos
│   │   │   │   │   │   ├── administrador.component.html
│   │   │   │   │   │   ├── administrador.component.ts
│   │   │   │   │   │   ├── administrador.component.css
│   │   │   │   │   ├──lista-admin
│   │   │   │   │   │   ├── lista-admin.component.html
│   │   │   │   │   │   ├── lista-admin.component.ts
│   │   │   │   │   │   ├── lista-admin.component.css
│   │   │   ├── admin-routing.module.ts
│   │   │   ├── admin.module.ts
│   │   ├── alumno/
│   │   │   ├── adeudo/
│   │   │   │   ├── adeudo.component.html
│   │   │   │   ├── adeudo.component.ts
│   │   │   │   ├── adeudo.component.css
│   │   │   │   ├── adeudo.module.ts
│   │   │   │   ├── components/
│   │   │   │   │   ├── archivo
│   │   │   │   │   │   ├── archivo.component.html
│   │   │   │   │   │   ├── archivo.component.ts
│   │   │   │   │   │   ├── archivo.component.css
│   │   │   │   │   ├── info
│   │   │   │   │   │   ├── lista-admin.component.html
│   │   │   │   │   │   ├── lista-admin.component.ts
│   │   │   │   │   │   ├── lista-admin.component.css
│   │   │   │   │   ├── inicio
│   │   │   │   │   │   ├── inicio-admin.component.html
│   │   │   │   │   │   ├── inicio-admin.component.ts
│   │   │   │   │   │   ├── inicio-admin.component.css
│   │   │   ├── alumno-routing.module.ts
│   │   │   ├── alumno.module.ts
│   │   ├── auth/ (en este caso no tengo los componentes dentro de una carpeta components)
│   │   │   ├── login/
│   │   │   │   ├── login.component.html
│   │   │   │   ├── login.component.ts
│   │   │   │   ├── login.component.css
│   │   │   ├── register/
│   │   │   │   ├── register.component.html
│   │   │   │   ├── register.component.ts
│   │   │   │   ├── register.component.css
│   │   │   ├── auth-routing.module.ts
│   │   │   ├── auth.module.ts
│   │   ├── db/
│   │   │   ├── db.js (Configuración de la conexión a la base de datos 'no_adeudo')
│   │   ├── intarfaces/
│   │   │   ├── alumno.intarface.ts/
│   │   │   ├── alumno.intarface.ts/
│   │   │   ├── alumno.intarface.ts/
│   │   │   ├── alumno.intarface.ts/
│   │   ├── departamentos/
│   │   │   ├── verificar/
│   │   │   │   ├── verificar.component.html
│   │   │   │   ├── verificar.component.ts
│   │   │   │   ├── verificar.component.css
│   │   │   │   ├── components/
│   │   │   │   │   ├── info
│   │   │   │   │   │   ├── info.component.html
│   │   │   │   │   │   ├── info.component.ts
│   │   │   │   │   │   ├── info.component.css
│   │   │   │   │   ├── list
│   │   │   │   │   │   ├── list.component.html
│   │   │   │   │   │   ├── list.component.ts
│   │   │   │   │   │   ├── list.component.css
│   │   │   ├── departamentos-routing.module.ts
│   │   │   ├── departamentos.module.ts
│   │   ├── shared/
│   │   │   ├── nav
│   │   │   │   ├── nav.component.html
│   │   │   │   ├── nav.component.ts
│   │   │   │   ├── nav.component.css
│   │   │   ├── sidebar
│   │   │   │   ├── sidebar.component.html
│   │   │   │   ├── sidebar.component.ts
│   │   │   │   ├── sidebar.component.css
│   │   │   ├── shared.module.ts
│   │   ├── service
│   │   │   ├── auth.service.ts
│   │   ├── app-routing.module.ts
│   │   ├── app-component.css
│   │   ├── app-component.html
│   │   ├── app-component.spect.ts
│   │   ├── app-component.ts
│   │   ├── app-module.ts

├── server.js
├── package.json
├── uploads/
│   ├── (imágenes subidas aquí)
├── angular.json
├── node_modules/
│   ├── (librerías instaladas)


el login funciona, pero hasta ahora solo pueden iniciar sesion los alumnos, cuando ellos inisian sesion son llevados a un componente en espesifico.
en cuando al server.js, NO MODIFIQUES el query que se trae los datos de alumnos y peticiones, dejalo como esta.

quiero hacer exactamente lo mismo con admin y departamentos, iniciar sesion y que los mande por medio de rutas a un componente en espesifico.
para logear o buscar en las tablas de admin y departamentos usa exactamente la misma estructura del query de alumnos.

si es necesario usa interfaces

ahora, en el html y ts de login.component, el formulario tiene un dropdown, este tiene por defecto al alumno, pero tiene otros 2 valores admin y departamento
dependiendo de que tipo de usuario inicie sesion sera el query y la ruta que se ejecutara, crea algo como un if en server.js y dependiendo del valor de ese dropdown
sera el query que se ejecutara.

ahora cuando un usuario inicie sesion te traeras o consultaras las sig tablas:
Alumno: datos de tabla alumno y peticiones.(aqui oviamente te traeras solo los datos del alumno que inicio sesion)
Departamento: datos de tabla alumno y peticiones(te traeras todos los datos de la tabla alumno junto con los datos de la tabla peticiones, la consulta es casi igual que alumno pero en si te traeras todos los datos)
Admin: datos de tabla alumno, departamentos y peticiones(te traes todos los datos de la tabla alumno, todos los de peticiones y los departamentos)
IMPORTANTE: los datos de la tabla peticiones son de los alumnos el no_control de alumnos es la PK de la tabla peticiones no_control, en si es como si fuera la misma tabla.

las funciones de los archivos que son tipo: setAlumno, loginAlumno, getAlumno, cambialas a ej: setUser, loginUser, getUser, de estaforma no se usaran
funciones etiquetadas con cierto tipo de usuario, esto mas que nada para generalizar los usuarios.
