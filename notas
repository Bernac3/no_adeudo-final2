Proyecto/
├── src/
│   ├── app/
│   │   ├── admin/
│   │   │   ├── administrador/
│   │   │   │   ├── administrador.component.html
│   │   │   │   ├── administrador.component.ts
│   │   │   │   ├── administrador.component.css
│   │   │   │   ├── components/
│   │   │   │   │   ├──departamentos
│   │   │   │   │   │   ├── administrador.component.html
│   │   │   │   │   │   ├── administrador.component.ts
│   │   │   │   │   │   ├── administrador.component.css
│   │   │   │   │   ├──lista-admin
│   │   │   │   │   │   ├── lista-admin.component.html
│   │   │   │   │   │   ├── lista-admin.component.ts
│   │   │   │   │   │   ├── lista-admin.component.css
│   │   │   ├── admin-routing.module.ts
│   │   │   ├── admin.module.ts
│   │   ├── alumno/
│   │   │   ├── adeudo/
│   │   │   │   ├── adeudo.component.html
│   │   │   │   ├── adeudo.component.ts
│   │   │   │   ├── adeudo.component.css
│   │   │   │   ├── adeudo.module.ts
│   │   │   │   ├── components/
│   │   │   │   │   ├── archivo
│   │   │   │   │   │   ├── archivo.component.html
│   │   │   │   │   │   ├── archivo.component.ts
│   │   │   │   │   │   ├── archivo.component.css
│   │   │   │   │   ├── info
│   │   │   │   │   │   ├── lista-admin.component.html
│   │   │   │   │   │   ├── lista-admin.component.ts
│   │   │   │   │   │   ├── lista-admin.component.css
│   │   │   │   │   ├── inicio
│   │   │   │   │   │   ├── inicio-admin.component.html
│   │   │   │   │   │   ├── inicio-admin.component.ts
│   │   │   │   │   │   ├── inicio-admin.component.css
│   │   │   ├── alumno-routing.module.ts
│   │   │   ├── alumno.module.ts
│   │   ├── auth/ (en este caso no tengo los componentes dentro de una carpeta components)
│   │   │   ├── login/
│   │   │   │   ├── login.component.html
│   │   │   │   ├── login.component.ts
│   │   │   │   ├── login.component.css
│   │   │   ├── register/
│   │   │   │   ├── register.component.html
│   │   │   │   ├── register.component.ts
│   │   │   │   ├── register.component.css
│   │   │   ├── auth-routing.module.ts
│   │   │   ├── auth.module.ts
│   │   ├── db/
│   │   │   ├── db.js (Configuración de la conexión a la base de datos 'no_adeudo')
│   │   ├── intarfaces/
│   │   │   ├── alumno.intarface.ts/
│   │   ├── departamentos/
│   │   │   ├── verificar/
│   │   │   │   ├── verificar.component.html
│   │   │   │   ├── verificar.component.ts
│   │   │   │   ├── verificar.component.css
│   │   │   │   ├── components/
│   │   │   │   │   ├── info
│   │   │   │   │   │   ├── info.component.html
│   │   │   │   │   │   ├── info.component.ts
│   │   │   │   │   │   ├── info.component.css
│   │   │   │   │   ├── list
│   │   │   │   │   │   ├── list.component.html
│   │   │   │   │   │   ├── list.component.ts
│   │   │   │   │   │   ├── list.component.css
│   │   │   ├── departamentos-routing.module.ts
│   │   │   ├── departamentos.module.ts
│   │   ├── shared/
│   │   │   ├── nav
│   │   │   │   ├── nav.component.html
│   │   │   │   ├── nav.component.ts
│   │   │   │   ├── nav.component.css
│   │   │   ├── sidebar
│   │   │   │   ├── sidebar.component.html
│   │   │   │   ├── sidebar.component.ts
│   │   │   │   ├── sidebar.component.css
│   │   │   ├── shared.module.ts
│   │   ├── service
│   │   │   ├── auth.service.ts
│   │   ├── app-routing.module.ts
│   │   ├── app-component.css
│   │   ├── app-component.html
│   │   ├── app-component.spect.ts
│   │   ├── app-component.ts
│   │   ├── app-module.ts

├── server.js 
├── package.json
├── uploads/
│   ├── (imágenes subidas aquí)
├── angular.json
├── node_modules/
│   ├── (librerías instaladas)

la base de datos se llama "no_adeudo", esta tiene 4 tablas, administrador, alumnos, peticiones y departamentos:

administrador:
Columns:
idadministrador int AI PK 
usuario varchar(45) 
contrasena varchar(45)

alumnos:
Columns:
idalumnos int AI PK NN
nombre_completo varchar(100) 
correo varchar(45) 
telefono varchar(45) 
no_control varchar(45) UQ
foto varchar(45) 
contrasena varchar(45) 
fecha_registro date

departamentos: 
Columns:
iddepartamentos int AI PK 
nombre_departamento varchar(45) 
usuario varchar(45) 
contrasena varchar(45)

peticiones
Columns:
no_control varchar(10) PK NN

estatus_administracion_y_finanzas varchar(10) default/expression: 'pendiente'
estatus_centro_de_informacion varchar(10) default/expression: 'pendiente'
estatus_centro_de_computo varchar(10) default/expression: 'pendiente'
estatus_recursos_materiales varchar(10) default/expression: 'pendiente'
estatus_departamento_de_vinculacion varchar(10) default/expression: 'pendiente'

comentario_administracion_y_finanzas varchar(100) default/expression: ''
comentario_centro_de_informacion varchar(100) default/expression: ''
comentario_centro_de_computo varchar(100) default/expression: ''
comentario_recursos_materiales varchar(100) default/expression: ''
comentario_departamento_de_vinculacion varchar(100) default/expression: ''
estatus_peticion varchar(10) default/expression: 'Sin Enviar'


app-routing.module.ts:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: '',
    redirectTo: '/auth/login',
    pathMatch: 'full'
  },
  {
    path: 'auth',
    loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule)
  },
  {
    path: 'admin',
    loadChildren: () => import('./admin/admin.module').then(m => m.AdminModule)
  },
  {
    path: 'alumno',
    loadChildren: () => import('./alumno/alumno.module').then(m => m.AlumnoModule)
  },
  {
    path: 'departamentos',
    loadChildren: () => import('./departamentos/departamentos.module').then(m => m.DepartamentosModule)
  },
  {
    path: '**',
    redirectTo: '/auth/login' // Wildcard para rutas no reconocidas
  }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }

alumno-routing.module.ts:

import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { AdeudoComponent } from './adeudo/adeudo.component'
import { InicioComponent } from './adeudo/components/inicio/inicio.component';
import { ArchivoComponent } from './adeudo/components/archivo/archivo.component';
import { InfoComponent } from './adeudo/components/info/info.component';

const routes: Routes = [
 {
  path: '',
  component: AdeudoComponent,
  children: [
    {
      path: 'home',
      component: InicioComponent,
    },
    {
      path: 'archivo',
      component: ArchivoComponent
    },
    {
      path: 'info',
      component: InfoComponent
    }
  ]
 }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AlumnoRoutingModule { }


login.component.html:

<div class="bg-main-app">
    <div class="container d-flex justify-content-center align-items-center vh-100">

<form (ngSubmit)="onLogin()">
    <div>
      <label for="correo">Correo:</label>
      <input type="email" id="correo" [(ngModel)]="correo" name="correo" required />
    </div>
    <div>
      <label for="contrasena">Contraseña:</label>
      <input type="password" id="contrasena" [(ngModel)]="contrasena" name="contrasena" required />
    </div>
    <button type="submit">Iniciar Sesión</button>
</form>

<div *ngIf="error" style="color: red;">{{ error }}</div>
</div> 
</div>

login.component.ts:

import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { AuthService } from '../../service/auth.service';
import { Alumno } from '../../interfaces/alumno.interface';

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css'],
})
export class LoginComponent {
  correo: string = '';
  contrasena: string = '';
  error: string | null = null;

  constructor(private authService: AuthService, private router: Router) {}

  onLogin(): void {
    this.authService.login(this.correo, this.contrasena).subscribe({
      next: (alumno: Alumno) => {
        this.authService.setAlumno(alumno); // Guardar datos del alumno en el servicio

        // Mostrar mensaje de éxito en la consola
        console.log('Inicio de sesión exitoso:', alumno);

        this.router.navigate(['/alumno/adeudo']); // Navegar a otra página
      },
      error: (err) => {
        this.error = 'Credenciales incorrectas o error en el servidor';
        console.error(err);
      },
    });
  }
}

auth.service.ts:

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { Alumno } from '../interfaces/alumno.interface'; // Asegúrate de ajustar la ruta

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/api/login'; // Endpoint del backend
  private alumnoSubject = new BehaviorSubject<Alumno | null>(null); // Almacena los datos del alumno

  constructor(private http: HttpClient) {}

  // Método para iniciar sesión
  login(correo: string, contrasena: string): Observable<Alumno> {
    return this.http.post<Alumno>(this.apiUrl, { correo, contrasena });
  }

  // Guardar los datos del alumno en el servicio
  setAlumno(alumno: Alumno): void {
    this.alumnoSubject.next(alumno);
  }

  // Obtener los datos del alumno desde cualquier componente
  getAlumno(): Observable<Alumno | null> {
    return this.alumnoSubject.asObservable();
  }
}


server.js:

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors'); // Importar el middleware cors
const db = require('./src/app/db/db');

const app = express();

// Habilitar CORS para todos los orígenes
app.use(cors());

// Parsear solicitudes JSON
app.use(bodyParser.json());

// Endpoint para iniciar sesión
app.post('/api/login', (req, res) => {
  const { correo, contrasena } = req.body;

  const query = `
    SELECT idalumnos, nombre_completo, correo, telefono, no_control, foto, fecha_registro
    FROM alumnos
    WHERE correo = ? AND contrasena = ?
  `;

  db.query(query, [correo, contrasena], (err, results) => {
    if (err) {
      console.error('Error al verificar alumno:', err);
      return res.status(500).json({ error: 'Error en el servidor' });
    }

    if (results.length === 0) {
      return res.status(401).json({ error: 'Credenciales incorrectas' });
    }

    res.status(200).json(results[0]);
  });
});

const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});
