
te voy a pasar codigo, no agas nada de momento.


// server.js

const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors');
const db = require('./src/app/db/db');
const multer = require('multer');
const app = express();
const path = require('path');


app.use(cors());
app.use(bodyParser.json());

app.use('/uploads', express.static(path.join(__dirname, 'uploads')));


app.post('/api/login', (req, res) => {
  const { correo, contrasena, tipo_usuario } = req.body;

  let query = '';

  // Lógica condicional basada en el tipo de usuario
  if (tipo_usuario === 'Alumno') {
    console.log('Tipo de usuario: Alumno');
    query = `
      SELECT
        a.idalumnos,
        a.nombre_completo,
        a.correo,
        a.telefono,
        a.no_control,
        a.foto,
        a.fecha_registro,
        p.estatus_administracion_y_finanzas,
        p.estatus_centro_de_informacion,
        p.estatus_centro_de_computo,
        p.estatus_recursos_materiales,
        p.estatus_departamento_de_vinculacion,
        p.comentario_administracion_y_finanzas,
        p.comentario_centro_de_informacion,
        p.comentario_centro_de_computo,
        p.comentario_recursos_materiales,
        p.comentario_departamento_de_vinculacion,
        p.estatus_peticion
      FROM
        alumnos a
      LEFT JOIN
        peticiones p ON a.no_control = p.no_control
      WHERE
        a.correo = ? AND a.contrasena = ?
    `;
  } else if (tipo_usuario === 'Departamento') {
    query = `
      SELECT
        d.iddepartamentos,
        d.nombre_departamento,
        d.usuario,
        d.departamento_id,
        d.rol
      FROM
        departamentos d
      WHERE
        d.usuario = ? AND d.contrasena = ?
    `;
  } else if (tipo_usuario === 'Admin') {
    console.log('Tipo de usuario: Admin');

    query = `
      SELECT
        a.idalumnos,
        a.nombre_completo,
        a.correo,
        a.telefono,
        a.no_control,
        a.foto,
        a.fecha_registro,
        p.estatus_administracion_y_finanzas,
        p.estatus_centro_de_informacion,
        p.estatus_centro_de_computo,
        p.estatus_recursos_materiales,
        p.estatus_departamento_de_vinculacion,
        p.comentario_administracion_y_finanzas,
        p.comentario_centro_de_informacion,
        p.comentario_centro_de_computo,
        p.comentario_recursos_materiales,
        p.comentario_departamento_de_vinculacion,
        p.estatus_peticion,
        d.nombre_departamento,
        d.departamento_id
      FROM
        alumnos a
      LEFT JOIN
        peticiones p ON a.no_control = p.no_control
      LEFT JOIN
        departamentos d ON d.departamento_id = a.no_control
      WHERE
        a.correo = ? AND a.contrasena = ?
    `;
  } else {
    return res.status(400).json({ error: 'Tipo de usuario no válido' });
  }

  db.query(query, [correo, contrasena], (err, results) => {
    if (err) {
      console.error('Error al verificar usuario:', err);
      return res.status(500).json({ error: 'Error en el servidor' });
    }

    if (results.length === 0) {
      console.log('Credenciales incorrectas');

      return res.status(401).json({ error: 'Credenciales incorrectas' });
    }
    console.log('Usuario autenticado:', results[0]);
    res.status(200).json(results[0]); // Enviamos los datos según el tipo de usuario
  });
});

// Suponiendo que estás utilizando Express
app.get('/api/alumnos-peticiones', (req, res) => {
  const query = `
    SELECT alumnos.*, peticiones.*
    FROM alumnos
    LEFT JOIN peticiones ON alumnos.no_control = peticiones.no_control;
  `;

  db.query(query, (err, results) => {
    if (err) {
      console.error('Error al obtener los datos:', err);
      return res.status(500).json({ error: 'Error al obtener los datos' });
    }
    res.json(results); // Retorna los resultados como un arreglo de objetos
  });
});



const PORT = 3000;
app.listen(PORT, () => {
  console.log(`Servidor corriendo en http://localhost:${PORT}`);
});

// 📁 Configuración de multer para subir imágenes
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, './uploads/'); // Carpeta donde se guardarán las imágenes
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
    cb(null, uniqueSuffix + path.extname(file.originalname)); // Nombre único para evitar colisiones
  }
});

const upload = multer({ storage: storage });

// 🌐 Ruta para registrar alumnos
app.post('/api/register', upload.single('foto'), (req, res) => {
  const { nombre_completo, correo, telefono, no_control, contrasena } = req.body;
  const foto = req.file ? req.file.filename : null; // Nombre de la imagen subida

  const query = `
    INSERT INTO alumnos (nombre_completo, correo, telefono, no_control, foto, contrasena, fecha_registro)
    VALUES (?, ?, ?, ?, ?, ?, NOW())
  `;

  db.query(query, [nombre_completo, correo, telefono, no_control, foto, contrasena], (err, result) => {
    if (err) {
      console.error('Error al registrar alumno:', err);
      return res.status(500).json({ error: 'Error en el servidor' });
    }
    res.status(201).json({ message: 'Alumno registrado exitosamente' });
  });
});















te voy a pasar codigo, no agas nada de momento.

// auth.service.ts

import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { Alumno } from '../interfaces/alumno.interface'; // Cambia esto para importar la interfaz general

@Injectable({
  providedIn: 'root',
})
export class AuthService {
  private apiUrl = 'http://localhost:3000/api/login';
  private userSubject = new BehaviorSubject<Alumno | null>(null);

  constructor(private http: HttpClient) {}

  // 🚀 Método actualizado para iniciar sesión y obtener los datos
  login(correo: string, contrasena: string, tipo_usuario: string): Observable<Alumno> {
    console.log('Enviando solicitud de login al servidor...');
    console.log('Correo:', correo);
    console.log('Contraseña:', contrasena);
    console.log('Tipo de usuario:', tipo_usuario);
    return this.http.post<Alumno>(this.apiUrl, { correo, contrasena, tipo_usuario });
  }

  setUser(user: Alumno): void {
    this.userSubject.next(user);
  }

  isUserAuthenticated(): Observable<boolean> {
    return this.userSubject.asObservable().pipe(map(user => !!user));
  }

  getUser(): Observable<Alumno | null> {
    return this.userSubject.asObservable();
  }

  logout(): void {
    this.userSubject.next(null);
    localStorage.removeItem('user');
    sessionStorage.removeItem('user');
  }

  getAlumnosYPeticiones(): Observable<Alumno[]> {
    const url = 'http://localhost:3000/api/alumnos-peticiones'; // Asegúrate de que este endpoint exista en el servidor
    return this.http.get<any[]>(url); // Obtiene los datos combinados de alumnos y peticiones
  }

  // apartir del modal, con esta funcion establecemos el estatus del alumno, asi como otros datos

  setAlumnoEstatus(){
    // Esta es la funcion que usaras para establecer el estatus
  }

}


list.component.ts

import { Component, OnInit } from '@angular/core';
import { FormControl } from '@angular/forms';
import { debounceTime } from 'rxjs/operators';  // Importar el operador debounceTime
import { AuthService } from '../../../../service/auth.service';
import { Alumno as Usuario } from '../../../../interfaces/alumno.interface';


@Component({
  selector: 'app-list',
  templateUrl: './list.component.html',
  styleUrls: ['./list.component.css']
})
export class ListComponent implements OnInit {

  usuario: Usuario | null = null; // estos son los datos del usuario que inicio sesion

  alumnosConPeticiones: any[] = [];
  alumnosOriginales: any[] = [];

  searchTermControl: FormControl = new FormControl(''); // Crear un FormControl para el input de búsqueda

  constructor(private authService: AuthService) {}

  ngOnInit(): void {
    this.authService.getAlumnosYPeticiones().subscribe(
      (data) => {
        this.alumnosConPeticiones = data;
        this.alumnosOriginales = [...data];  // Guardamos una copia de los datos completos
        console.log('Datos de alumnos con peticiones:', this.alumnosConPeticiones);
      },
      (error) => {
        console.error('Error al obtener los datos de los alumnos:', error);
      }
    );

    // Aplicar debounceTime al control de búsqueda
    this.searchTermControl.valueChanges.pipe(
      debounceTime(1000)  // Esperar 1 segundo después de la última escritura
    ).subscribe((searchTerm) => {
      this.buscarAlumnos(searchTerm);  // Ejecutar la búsqueda automáticamente
    });

    // Obtener los datos del Usuaro Departamento
    this.authService.getUser().subscribe((data) => {
      this.usuario = data; // Asignamos los datos del alumno
      console.log(`Datos List.component: User: ${this.usuario?.usuario} Departamento: ${this.usuario?.departamento_id}`)
    });
  }

  cargarDatosModal(alumno: any): void {
    const alumnoNombre = document.getElementById('alumnoNombre');
    const alumnoCorreo = document.getElementById('alumnoCorreo');
    const alumnoTelefono = document.getElementById('alumnoTelefono');
    const alumnoNoControl = document.getElementById('alumnoNoControl');
    const alumnoFechaRegistro = document.getElementById('alumnoFechaRegistro');
    const alumnoFoto = document.getElementById('alumnoFoto') as HTMLImageElement;

    if (alumnoNombre) alumnoNombre.textContent = alumno.nombre_completo;
    if (alumnoCorreo) alumnoCorreo.textContent = alumno.correo;
    if (alumnoTelefono) alumnoTelefono.textContent = alumno.telefono;
    if (alumnoNoControl) alumnoNoControl.textContent = alumno.no_control;
    if (alumnoFechaRegistro) {
      const fecha = new Date(alumno.fecha_registro);
      alumnoFechaRegistro.textContent = `${fecha.getDate().toString().padStart(2, '0')}/${(fecha.getMonth() + 1).toString().padStart(2, '0')}/${fecha.getFullYear()}`;
    }

    if (alumnoFoto) {
      alumnoFoto.src = `http://localhost:3000/uploads/${alumno.foto}`;
    }
    console.log(alumnoNoControl+ " este es el no.control")
  }

  ordenarAlumnos(opcion: string, event: Event): void {
    event.preventDefault();
    switch(opcion) {
      case 'nombre-asc':
        this.alumnosConPeticiones.sort((a, b) => a.nombre_completo.localeCompare(b.nombre_completo));
        break;
      case 'nombre-desc':
        this.alumnosConPeticiones.sort((a, b) => b.nombre_completo.localeCompare(a.nombre_completo));
        break;
      case 'nuevos':
        this.alumnosConPeticiones.sort((a, b) => new Date(b.fecha_registro).getTime() - new Date(a.fecha_registro).getTime());
        break;
      case 'viejos':
        this.alumnosConPeticiones.sort((a, b) => new Date(a.fecha_registro).getTime() - new Date(b.fecha_registro).getTime());
        break;
    }
  }

  // Función para realizar la búsqueda automática
  buscarAlumnos(searchTerm: string): void {
    if (searchTerm) {
      this.alumnosConPeticiones = this.alumnosOriginales.filter(alumno => {
        const nombreValido = alumno.nombre_completo ? alumno.nombre_completo.toLowerCase() : '';
        const noControlValido = alumno.no_control ? alumno.no_control.toLowerCase() : '';
        const correoValido = alumno.correo ? alumno.correo.toLowerCase() : '';

        return nombreValido.includes(searchTerm.toLowerCase()) ||
               noControlValido.includes(searchTerm.toLowerCase()) ||
               correoValido.includes(searchTerm.toLowerCase());
      });
    } else {
      this.alumnosConPeticiones = [...this.alumnosOriginales];
    }
  }

  // Funcion para Establecer Campo Adeudo a Alumno
  setEstadoAdeudoAlumno(): void {
    const alumnoNoControl = document.getElementById('alumnoNoControl')?.textContent

    const usuarioDepartamento = this.usuario?.usuario
    const usuarioDepartamentoId = this.usuario?.departamento_id

    let peticionEstatus;

    switch (this.usuario?.departamento_id) {
      case 'administracion_finanzas':
        peticionEstatus = 'estatus_administracion_y_finanzas';
        break;
      case 'centro_informacion':
        peticionEstatus = 'estatus_centro_de_informacion';
        break;
      case 'centro_computo':
        peticionEstatus = 'estatus_centro_de_computo';
        break;
      case 'recursos_materiales':
        peticionEstatus = 'estatus_recursos_materiales';
        break;
      case 'departamento_vinculacion':
        peticionEstatus = 'estatus_departamento_de_vinculacion';
        break;
    }
    console.log(`No_control: ${alumnoNoControl} Usuario_Departamento: ${usuarioDepartamento} Usuario_Departamento_id: ${usuarioDepartamentoId} Peticion_Estatus: ${peticionEstatus}`)



  }
  setConAdeudoAlumno(){
    console.log("Con adeudo")
  }
  setSinAdeudoAlumno(){
    console.log("Sin adeudo")

  }
}








te voy a pasar codigo, no agas nada de momento.



list.component.html

<div class="container mt-5 home-container">
  <div class="card">
    <div class="card-header bg-primary text-white text-center">
      <h2>Formato No-Adeudo</h2>
    </div>
    <div class="card-body">
      <div class="d-flex gap-2 my-3">
        <div class="dropdown">
          <button class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
            Ordenar por:
          </button>
          <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
            <li><a class="dropdown-item" href="#" (click)="ordenarAlumnos('nombre-asc', $event)">Nombre A-Z</a></li>
            <li><a class="dropdown-item" href="#" (click)="ordenarAlumnos('nombre-desc', $event)">Nombre Z-A</a></li>
            <li><a class="dropdown-item" href="#" (click)="ordenarAlumnos('nuevos', $event)">Nuevos Alumnos</a></li>
            <li><a class="dropdown-item" href="#" (click)="ordenarAlumnos('viejos', $event)">Viejos Alumnos</a></li>
          </ul>
        </div>

        <form class="d-flex" style="width: 50%;" role="search">
          <input class="form-control me-2" type="search" placeholder="Buscar..." aria-label="Search" [formControl]="searchTermControl">
          <button class="btn btn-outline-success" type="submit">Buscar</button>
        </form>

      </div>

      <table class="table table-bordered">
        <thead>
          <tr>
            <th scope="col">NOMBRE</th>
            <th scope="col">CORREO ELECTRÓNICO</th>
            <th scope="col">TEL</th>
            <th scope="col">No. DE CONTROL</th>
            <th scope="col">Fecha de Registro</th>
            <th scope="col">Información</th>
          </tr>
        </thead>
        <tbody>
          <tr *ngFor="let alumno of alumnosConPeticiones">
            <td class="p-2">{{ alumno.nombre_completo }}</td>
            <td class="p-2">{{ alumno.correo }}</td>
            <td class="p-2">{{ alumno.telefono }}</td>
            <td class="p-2">{{ alumno.no_control }}</td>
            <td class="p-2">{{ alumno.fecha_registro | date:'dd/MM/yyyy' }}</td>
            <td class="p-2">
              <button type="button" class="btn btn-primary ver-alumno"
                      data-bs-toggle="modal" data-bs-target="#alumnoModal"
                      (click)="cargarDatosModal(alumno)">
                Ver Alumno
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>
  </div>
</div>


<!-- Modal -->
<div class="modal fade" id="alumnoModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="alumnoModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
      <div class="modal-content">
          <div class="modal-header">
              <h1 class="modal-title fs-5" id="alumnoModalLabel">Información del Alumno</h1>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
              <div class="text-center mb-3">
                  <img id="alumnoFoto" src="https://via.placeholder.com/150" alt="Foto del alumno" class="img-fluid rounded" width="150">
              </div>

              <table class="table table-bordered">
                  <tbody>
                      <tr>
                          <th scope="row">Nombre</th>
                          <td id="alumnoNombre"></td>
                      </tr>
                      <tr>
                          <th scope="row">Correo</th>
                          <td id="alumnoCorreo"></td>
                      </tr>
                      <tr>
                          <th scope="row">Teléfono</th>
                          <td id="alumnoTelefono"></td>
                      </tr>
                      <tr>
                          <th scope="row">No. de Control</th>
                          <td id="alumnoNoControl"></td>
                      </tr>
                      <tr>
                          <th scope="row">Fecha de Registro</th>
                          <td id="alumnoFechaRegistro"></td>
                      </tr>
                  </tbody>
              </table>

              <div class="text-center mt-3">
                  <button class="btn btn-success me-2">Sin Adeudos</button>
                  <button class="btn btn-danger">Con Adeudos</button>
                </div>
              </div>
              <div class="modal-footer">
                <button class="btn btn-primary" (click)="setEstadoAdeudoAlumno()">Guardar</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
          </div>
      </div>
  </div>
</div>

a base de datos se llama "no_adeudo", esta tiene 4 tablas, administrador, alumnos, peticiones y departamentos:

administrador:
Columns:
idadministrador int AI PK
usuario varchar(45)
contrasena varchar(45)
rol varchar(20)

alumnos:
Columns:
idalumnos int AI PK NN
nombre_completo varchar(100)
correo varchar(45)
telefono varchar(45)
no_control varchar(45) UQ
foto varchar(45)
contrasena varchar(45)
fecha_registro date
rol varchar(20)

departamentos:
Columns:
iddepartamentos int AI PK
nombre_departamento varchar(45)
usuario varchar(45)
contrasena varchar(45)
departamento_id varchar(45)
rol varchar(20)

peticiones:
Columns:
no_control varchar(10) PK
estatus_administracion_y_finanzas varchar(10)
estatus_centro_de_informacion varchar(10)
estatus_centro_de_computo varchar(10)
estatus_recursos_materiales varchar(10)
estatus_departamento_de_vinculacion varchar(10)
comentario_administracion_y_finanzas varchar(100)
comentario_centro_de_informacion varchar(100)
comentario_centro_de_computo varchar(100)
comentario_recursos_materiales varchar(100)
comentario_departamento_de_vinculacion varchar(100)
estatus_peticion varchar(10)




te voy a pasar codigo, no agas nada de momento.


esta es la interface generica para todos los usuarios, usala:
usuario.interface.ts

// src/app/interfaces/usuario.interface.ts
export interface Usuario {
  id: number;  // Común para todos los usuarios, usaremos un solo campo para el id
  usuario: string;  // Nombre de usuario, puede ser para todos
  contrasena: string;  // Contraseña, común a todos
  rol: string;  // Común para todos los usuarios
  // Común para todos los usuarios
  nombre_completo?: string;  // Solo para Alumno (o Administrador si deseas mostrarlo)
  correo?: string;  // Solo para Alumno y Administrador
  telefono?: string;  // Solo para Alumno
  no_control?: string;  // Solo para Alumno
  foto?: string;  // Solo para Alumno
  fecha_registro?: string;  // Solo para Alumno

  // Campos específicos de Departamento
  departamento_id?: string;  // Solo para Departamento
  nombre_departamento?: string;  // Solo para Departamento

  // Campos específicos de Peticiones (para Alumno y Admin)
  estatus_administracion_y_finanzas?: string;
  estatus_centro_de_informacion?: string;
  estatus_centro_de_computo?: string;
  estatus_recursos_materiales?: string;
  estatus_departamento_de_vinculacion?: string;
  comentario_administracion_y_finanzas?: string;
  comentario_centro_de_informacion?: string;
  comentario_centro_de_computo?: string;
  comentario_recursos_materiales?: string;
  comentario_departamento_de_vinculacion?: string;
  estatus_peticion?: string;

  // Campos específicos para Administrador
  departamento_creado?: boolean;  // Si es administrador, puedes usar esto para indicar si tiene permiso para gestionar departamentos
}


esto es lo que hay que hacer:

en el modal del html tienes 2 botones, con adeudo y sin adeudo, cuandl el usuario presione cualquiera de los dos este modificara el row
del alumno donde el no_control de la tabla peticiones sea igual al alumnoNoControl de la funcion setEstadoAdeudoAlumno, ahora si te fijas bien tienes en esa funcion otras variables, usuarioDepartamento, usuarioDepartamentoId, peticionEstatus,
las dos primeras son los datos del usuario logeado en cuestion, y la ultima es peticion estatus, esta es en si el campo de la tabla peticiones a modificar dependiendo del tipo de Usuario.
quiero que cuando por ejemplo: luis con departamento_id: administracion_finanzas modifique en si de la tabla peticiones donde el id del alumno (alumnoNoControl: que es el no_control de la tabla alumnos) modifique en la tabla peticiones (donde alumnoNocontrol es el mismo
que no_control de la tabpa peticones)
no moficiques el codigo ya existente, agrega nuevas funcionalidades y comentalas o has lo que quieras pero que funcione
